import tkinter as tk
from tkinter import Menu, filedialog, scrolledtext, messagebox
import webbrowser
import subprocess
import os

def open_documentation():
    webbrowser.open("https://Simple-Script.github.io/SDL")

def save_sdl():
    file_path = filedialog.asksaveasfilename(defaultextension=".sdl", filetypes=[("SDL Files", "*.sdl")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write(editor.get("1.0", tk.END))

def load_sdl():
    file_path = filedialog.askopenfilename(filetypes=[("SDL Files", "*.sdl")])
    if file_path:
        with open(file_path, 'r') as file:
            editor.delete("1.0", tk.END)
            editor.insert("1.0", file.read())

def package_sdl():
    # Placeholder for packaging functionality
    messagebox.showinfo("Package SDL", "Package SDL functionality not implemented yet.")

def convert_to_exe():
    try:
        # Save current work first
        response = messagebox.askyesno("Save File", "Do you want to save your current work before converting?")
        if response:
            save_sdl()
        
        # Construct the PowerShell command to run py_to_exe.py
        powershell_command = "python py_to_exe.py"
        
        # Run the command
        process = subprocess.Popen(powershell_command, shell=True)
        
        # Show info message
        messagebox.showinfo("Convert to EXE", "Launching EXE converter tool...")
        
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while launching the converter: {str(e)}")

# Create the main application window
root = tk.Tk()
root.title("SDL Code Editor")
root.geometry("800x600")

# Create a menu bar
menu_bar = Menu(root)
root.config(menu=menu_bar)

# Add File menu
file_menu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Save SDL", command=save_sdl)
file_menu.add_command(label="Load SDL", command=load_sdl)
file_menu.add_command(label="Convert to EXE", command=convert_to_exe)
file_menu.add_separator()
file_menu.add_command(label="Documentation", command=open_documentation)

# Add a scrolled text editor
editor = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=100, height=30)
editor.pack(expand=True, fill="both")

# Run the application
root.mainloop()
